<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SUNBELIFE</title>
  
  <subtitle>寄存文字，延伸想法</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunbelife.com/"/>
  <updated>2018-09-11T05:22:52.998Z</updated>
  <id>https://sunbelife.com/</id>
  
  <author>
    <name>Sunbelife</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>教程的统一阅读指南</title>
    <link href="https://sunbelife.com/p/62df.html"/>
    <id>https://sunbelife.com/p/62df.html</id>
    <published>2018-09-11T05:19:58.000Z</published>
    <updated>2018-09-11T05:22:52.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了提高阅读效率，避免理解差异，美化排版。</p><p>本博客采用统一的行文规范和自定的阅读指南，请按照本文介绍的方法来阅读本博客的所有教程文章，本博客的教程文章也会按照此指南撰写。</p><a id="more"></a><h3 id="阅读约定"><a href="#阅读约定" class="headerlink" title="阅读约定"></a>阅读约定</h3><ul><li><p>一些需要多次使用的内容，为放混淆，我会在开始时进行详细解释，并赋予一个英文代称，文章后续会直接使用该代称，并用 <em>细斜体</em> 表示。</p><ul><li><p>如 <em>my_title</em> = 你文章的标题。</p><p>  即后面文章出现的 <em>my_title</em> 即都代表着你文章的标题。</p></li></ul></li><li><p>以 <strong><em>粗斜体</em></strong> 展示的内容，是你需要根据实际情况自行替换的。</p><ul><li><p>如 cd /Users/<strong><em>你的用户名</em></strong>/Desktop</p><p>  即需要先找到你的用户名，比如 Sunbelife，该段即为 cd /Users/Sunbelife/Desktop</p></li></ul></li><li><p>以下代码块方式展示的内容，一般情况下是你需要输入在终端或控制台内的，但也有特殊情况，比如示例或实例代码的展示：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><p>如有任何关于教程的问题，请在文章底部，礼貌，尊重，全面地描述清楚你的问题。</p><p>包括你操作在哪一步，尝试过什么努力，最后结果提示了什么，希望我给你哪部分帮助，最好可以附图。</p><p>有关如何提问，请查阅：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">《提问的智慧 <strong>How To Ask Questions The Smart Way</strong>》</a>，这将对你在互联网上有效地获取信息有很大帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为了提高阅读效率，避免理解差异，美化排版。&lt;/p&gt;
&lt;p&gt;本博客采用统一的行文规范和自定的阅读指南，请按照本文介绍的方法来阅读本博客的所有教程文章，本博客的教程文章也会按照此指南撰写。&lt;/p&gt;
    
    </summary>
    
      <category term="必读" scheme="https://sunbelife.com/categories/%E5%BF%85%E8%AF%BB/"/>
    
      <category term="教程阅读指南" scheme="https://sunbelife.com/categories/%E5%BF%85%E8%AF%BB/%E6%95%99%E7%A8%8B%E9%98%85%E8%AF%BB%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>没有 XX 助手没关系，在 macOS 上照样玩转 Android 机</title>
    <link href="https://sunbelife.com/p/16c3.html"/>
    <id>https://sunbelife.com/p/16c3.html</id>
    <published>2018-09-11T03:20:29.000Z</published>
    <updated>2018-09-11T05:18:53.232Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前几日突然萌生入一台安卓折腾折腾的想法，于是从朋友手里收到一台 Nexus 6P。<br>到货第一天便折腾到半夜，激情复燃，想写一写在 macOS 上搞机的心得，虽然没有 Windows 平台那么多『助手』和『大师』帮忙。<br>但其实也没有想象中那么蛋疼。<br>相反，没有这些『大师』对你手机的『指指点点』，搞机过程还更舒心一些。</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文内容都基于 ADB（Android Debug Bridge）这个工具，它可以实现对 Android 设备应用的安装和设备的调试，所以以下的内容都基于它提供的功能，如果你仅仅知道 ADB，但还不熟悉，你可以把本文当做它的小白文档参考使用。如果你已经非常熟悉 ADB，你可以查看其它文章，因为本文只是在介绍它包含的功能而已。</p><p>详细全面的介绍也可以参考文章末尾附录提供的网址。</p><h3 id="阅读约定"><a href="#阅读约定" class="headerlink" title="阅读约定"></a>阅读约定</h3><p>开始之前，为了避免理解差异和排版美观，先和各位约定一下本教程的使用方法：</p><ul><li><p>一些需要多次使用的内容，为放混淆，我会在开始时进行详细解释，并赋予一个英文代称，文章后续会直接使用该代称，并用 <em>细斜体</em> 表示。</p><ul><li><p>如 <em>my_title</em> = 你文章的标题。</p><p>  即后面文章出现的 <em>my_title</em> 即都代表着你文章的标题。</p></li></ul></li><li><p>以 <strong><em>粗斜体</em></strong> 展示的内容，是你需要根据实际情况自行替换的。</p><ul><li><p>如 cd /Users/<strong><em>你的用户名</em></strong>/Desktop</p><p>  即需要先找到你的用户名，比如 Sunbelife，该段即为 cd /Users/Sunbelife/Desktop</p></li></ul></li><li><p>以下代码块方式展示的内容，一般情况下是你需要输入在终端或控制台内的，但也有特殊情况，比如示例或实例代码的展示：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><p>如有任何关于教程的问题，请在文章底部，礼貌，尊重，全面地描述清楚你的问题。</p><p>包括你操作在哪一步，尝试过什么努力，最后结果提示了什么，希望我给你哪部分帮助，最好可以附图。</p><p>有关如何提问，请查阅：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">《提问的智慧 <strong>How To Ask Questions The Smart Way</strong>》</a>，这将对你在互联网上有效地获取信息有很大帮助。</p><h2 id="教程正文"><a href="#教程正文" class="headerlink" title="教程正文"></a>教程正文</h2><h3 id="进入模式-·-刷机第一步"><a href="#进入模式-·-刷机第一步" class="headerlink" title="进入模式  · 刷机第一步"></a>进入模式  · 刷机第一步</h3><p>刚拿到 Nexus 系列机器时需要做的第一件事就是解开 Bootloader 锁，之后才可以刷入任意的第三方 Recovery。<br>而在 macOS 上你只需要打开终端，输入以下命令，来安装本文的主角：ADB.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install android-platform-tools</span><br></pre></td></tr></table></figure><p>走完进度条之后，输入以下命令来测试是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb</span><br></pre></td></tr></table></figure><p>如果看到提示一堆文字，而不是 Command not found，则表示已经安装成功，此时你只需要将手机连接至电脑，开启 USB 调试模式（一般在设置—开发者选项中），再选择信任此计算机即可，如下图：</p><img src="/p/16c3/1-USB调试.png"><p>开启 USB 调试，一切就好办了，此时，在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>你会看到设备已经出现在列表中：</p><img src="/p/16c3/2-adb.jpeg"><p>如果你想进入 Recovery/Bootloader 模式，亦或是简单的重启，就只需要输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot recovery/bootloader</span><br></pre></td></tr></table></figure><h3 id="拿到新机-·-解锁不麻烦"><a href="#拿到新机-·-解锁不麻烦" class="headerlink" title="拿到新机  · 解锁不麻烦"></a>拿到新机  · 解锁不麻烦</h3><p>解决了进入模式的问题之后，你应该学会了如何进入 bootloader，我们这一步的步骤就是在这个模式下进行的。</p><p>进入 Bootloader 模式后，在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flashing unlock</span><br></pre></td></tr></table></figure><p>成功之后你的手机会进入解锁模式，问你要不要解锁，直接选择『Yes』即可：</p><img src="/p/16c3/3-选yes.jpg"><p>以后再开机你就可以看到屏幕下放多了一个解开的小锁头，解锁就成功了。</p><img src="/p/16c3/4-小锁头.jpg"><p>本部分步骤参考：<a href="https://developers.google.cn/android/images" target="_blank" rel="noopener">Google 官方教程</a></p><h3 id="自由刷机-·-就几条命令"><a href="#自由刷机-·-就几条命令" class="headerlink" title="自由刷机  · 就几条命令"></a>自由刷机  · 就几条命令</h3><p>解完锁之后做的事就是刷个称手的第三方 Recovery，我推荐大家使用 TWRP，这是一个图形化，而且支持触摸操作的，功能强大的 Recovery，你可以在本文的附录中找到它的下载链接。</p><p>而刷入 Recovery 的命令也十分简单，你只需要把手机进入 Bootloader，然后输入以下命令：<br>（当然，除了 Recovery，只要你有镜像，Vendor，Bootloader，Radio 都是可以刷进去的。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot vendor/radio/bootloader/recovery xxx.img</span><br></pre></td></tr></table></figure><p>注：需要刷入对应的 .img，本命令同时仅可刷入一种镜像，不可多选。</p><p>如果你想线刷官方原厂镜像，你可以在本文的附录中找到 Nexus 系列的工厂镜像，然后解压，即可在路径里找到：flash_all.bat 和 flash_all.sh 这两个脚本文件。</p><p>前者对应的是 Windows 系统， 后者对应的则是 macOS/Linux 系统，所以如果你想在 macOS 下线刷原厂镜像，只需要将机器置于 Bootloader 模式，然后在终端进入镜像目录，再输入： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh flash_all.sh</span><br></pre></td></tr></table></figure><p>即可进入如下图的自动刷机流程。</p><img src="/p/16c3/5-工厂镜像.jpeg"><p>当然，如果你想刷入普通的刷机包，只需要进入 Recovery ，然后使用 push 命令将 Rom 推送到手机内存卡中，最后使用 Recovery 选择刷入即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push xxx.zip /sdcard/</span><br></pre></td></tr></table></figure><p>除此之外，还有一种更省事的第三方 Rom 刷机方法，既不用传文件，也不用手动选择刷机包 —— 用 Sideload 来刷入，要使用这个，你得先在 Recovery 中开启 Sideload 隧道，以 TWRP 为例，隧道开关在 Advanced -&gt; ADB SideLoad 中（记得勾选双清）：</p><img src="/p/16c3/6-sideload.jpeg"><p>然后在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb sideload xxx.zip</span><br></pre></td></tr></table></figure><p>即可进入 sideload 模式，不过按我的经验来讲，这个模式下成功率较低，建议先 push 再手动刷。</p><h3 id="互传文件-·-不用找助手"><a href="#互传文件-·-不用找助手" class="headerlink" title="互传文件  · 不用找助手"></a>互传文件  · 不用找助手</h3><p>接下来介绍一下利用 ADB 实现 macOS 与 Android 之间互传文件的方法，命令分别是 push 和 pull，顾名思义，push 是从电脑中『推送』到手机中，Pull 则是从手机中『拉取』到电脑中，命令格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push 电脑上文件路径 手机上放置路径 （如 adb push xxx.zip /sdcard/ 为将 xxx.zip 推送到手机内存卡根目录）</span><br><span class="line">adb pull 手机上文件路径 电脑上放置路径 （如 adb pull xxx.zip /User/）</span><br></pre></td></tr></table></figure><p>需要注意的是，push &amp; pull 的两个参数中，第一个参数为完整路径 + 文件名，第二个参数为完整路径。命令成功输入后会出现进度条，进度条走完会显示传输报告（传输速度，耗费时间，和字节数）<br>如下图：</p><img src="/p/16c3/7-pullpush.jpeg"><p>Push &amp; Pull 命令足够简洁，平时使用中推送一个 Rom 文件到手机根目录中时用它就再方便不过了。</p><p>不过也仅仅如此，要想方便高效的管理手机中的数据，或者与电脑互传数据，命令行确实不太方便，所以和大家推荐一款 macOS 上图形化的文件管理软件，界面非常的美观，而且没有广告和流氓助手《HandShaker》，你可以在这里下载：<a href="http://www.smartisan.com/apps/handshaker" target="_blank" rel="noopener">http://www.smartisan.com/apps/handshaker</a></p><img src="/p/16c3/8-handshaker.jpeg"><h3 id="安装程序-·-就这一下子"><a href="#安装程序-·-就这一下子" class="headerlink" title="安装程序  · 就这一下子"></a>安装程序  · 就这一下子</h3><p>虽然平时传文件用 HandShaker 就完全可以胜任了，但我们有时需要在电脑上为手机安装 Apk 格式的软件，传文件进去再用手机安装就有点麻烦了。</p><p>为此，ADB 提供了一个命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install xx.apk</span><br></pre></td></tr></table></figure><p>注：install 后面跟着的所安装的 apk 文件名需包含路径，即：路径/xxx.apk。</p><img src="/p/16c3/9-apk安装.jpeg"><h3 id="无线连接-·-啥姿势都行"><a href="#无线连接-·-啥姿势都行" class="headerlink" title="无线连接  · 啥姿势都行"></a>无线连接  · 啥姿势都行</h3><p>一般情况下我们是使用 USB 来连接电脑的，但有些时候，比如手机在享受快充充电，我们只是想安装个软件，这种情况就没必要打断它了。因为我们可以无线连接来继续 ADB 操作。</p><p>第一次使用无线连接之前需要进行一下配置，请确保你的电脑和手机连接至同一个 Wi-Fi，手机也已通过 USB 连接至电脑，然后在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br></pre></td></tr></table></figure><p>即可断开手机与电脑的 USB 连接，到手机中查看本机的 iP 地址（设置—&gt;关于手机—&gt;状态信息）。</p><img src="/p/16c3/10-状态.png"><p>记下这个 iP 地址之后（此例中为 192.168.0.100），回到终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect [你的 iP 地址]</span><br></pre></td></tr></table></figure><p>命令成功后即可收到已连接设备的提示</p><p>再输入 adb devices 就能看到你的设备：</p><img src="/p/16c3/2-adb.jpeg"><p>之后你就可以按照本文前面介绍的方法来操作你的设备了，如果你重启电脑，则需要重新来一遍这个流程，如果你关闭了手机的 Wi-Fi，则需要输入 adb connect 来再次连接。</p><h3 id="SSH-接入-·-开启新天地"><a href="#SSH-接入-·-开启新天地" class="headerlink" title="SSH 接入 · 开启新天地"></a>SSH 接入 · 开启新天地</h3><p>至此，本文已经将 macOS 下对 Android 手机常见的操作方法介绍完毕了，这一部分介绍的是在 macOS 上通过 SSH 连接 Android 机的方法。<br>如果你不了解什么是 SSH，可以跳过本部分，这并不会影响你的日常使用；如果你想了解什么是 SSH，你只要大概知道这是手机上的终端，然后去搜索引擎以『Unix Shell』为关键词搜索即可，那些资料里的内容都能套用在 Android 手机上。<br>在 macOS 下通过 SSH 连接 Android 的方法非常简单，你只需要输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure><p>即可进入手机的 Shell 中：</p><img src="/p/16c3/11-shell.jpeg"><h3 id="附录最后-·-为了凑字数"><a href="#附录最后-·-为了凑字数" class="headerlink" title="附录最后  · 为了凑字数"></a>附录最后  · 为了凑字数</h3><h2 id="最后附上几个你可能会需要的东西："><a href="#最后附上几个你可能会需要的东西：" class="headerlink" title="最后附上几个你可能会需要的东西："></a>最后附上几个你可能会需要的东西：</h2><p>可能是最纯净的，Nexus 系列官方底包：<a href="https://developers.google.cn/android/images" target="_blank" rel="noopener">https://developers.google.cn/android/images</a><br>可能是最全面的，谷歌官网对 ADB (Andorid Debug Bridge) 的介绍：<a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">https://developer.android.com/studio/command-line/adb.html</a><br>可能是最好用的 Recovery：TWRP 的官方网站：<a href="https://dl.twrp.me" target="_blank" rel="noopener">https://dl.twrp.me</a><br>可能是最好用的，为你提供方便各种版本 &amp; 各种完整度的 Google 服务的网站：<a href="http://opengapps.org" target="_blank" rel="noopener">http://opengapps.org</a><br>可能是最有意思的，我的新浪微博：@Sunbelife，欢迎和我讨论和分享好玩的东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前几日突然萌生入一台安卓折腾折腾的想法，于是从朋友手里收到一台 Nexus 6P。&lt;br&gt;到货第一天便折腾到半夜，激情复燃，想写一写在 macOS 上搞机的心得，虽然没有 Windows 平台那么多『助手』和『大师』帮忙。&lt;br&gt;但其实也没有想象中那么蛋疼。&lt;br&gt;相反，没有这些『大师』对你手机的『指指点点』，搞机过程还更舒心一些。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>嫌一键关灯后电脑屏幕太亮，我在家鼓捣了好几天</title>
    <link href="https://sunbelife.com/p/bd07.html"/>
    <id>https://sunbelife.com/p/bd07.html</id>
    <published>2018-09-09T15:57:27.000Z</published>
    <updated>2018-09-11T05:17:51.475Z</updated>
    
    <content type="html"><![CDATA[<div class="picture"><br>  <video id="mainvideo" poster="https://preview-ec.dafork.com/FmdzzT3eIfFKhH_jtOrAKJs0ITLH/600" ratiow="1280" ratioh="720" style="background-color: rgb(13, 13, 13); width: 100%;" src="http://lvideo.dafork.com/lkXYpE1azEEnby1CgWHpMEHwhdqR" controls></video><br></div><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前晚上睡觉关灯之后发现电脑屏幕还亮着，很晃眼，强迫症发作。</p><p>决心要实现关灯时连着电脑屏幕也关掉的效果。</p><p>所以这几天没时间上微博，一直在家鼓捣，用尽了各种奇技淫巧，踩了 n 个深坑，失败了 n++ 次，查阅了 n+=2 份资料，最后终于在 Homekit 上写出来了个开启/关闭电脑屏幕的开关。</p><p>晚上睡觉的时候眼睛终于不用被电脑屏幕晃了。 </p><p>虽然这么个小东西历尽折磨，但最后终于成功的时候体内还是分泌出了一股又一股的浓浓的多巴胺…</p><p>话不多说，上教程。</p><p>注：目前只做了 Mac 版。</p><h3 id="阅读约定"><a href="#阅读约定" class="headerlink" title="阅读约定"></a>阅读约定</h3><p>开始之前，为了避免理解差异和排版美观，先和各位约定一下本教程的使用方法：</p><ul><li><p>一些需要多次使用的内容，为放混淆，我会在开始时进行详细解释，并赋予一个英文代称，文章后续会直接使用该代称，并用 <em>细斜体</em> 表示。</p><ul><li><p>如 <em>my_title</em> = 你文章的标题。</p><p>即后面文章出现的 <em>my_title</em> 即都代表着你文章的标题。</p></li></ul></li><li><p>以 <strong><em>粗斜体</em></strong> 展示的内容，是你需要根据实际情况自行替换的。</p><ul><li><p>如 cd /Users/<strong><em>你的用户名</em></strong>/Desktop</p><p>即需要先找到你的用户名，比如 Sunbelife，该段即为 cd /Users/Sunbelife/Desktop</p></li></ul></li><li><p>以下代码块方式展示的内容，一般情况下是你需要输入在终端或控制台内的，但也有特殊情况，比如示例或实例代码的展示：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><p>如有任何关于教程的问题，请在文章底部，礼貌，尊重，全面地描述清楚你的问题。</p><p>包括你操作在哪一步，尝试过什么努力，最后结果提示了什么，希望我给你哪部分帮助，最好可以附图。</p><p>有关如何提问，请查阅：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">《提问的智慧 <strong>How To Ask Questions The Smart Way</strong>》</a>，这将对你在互联网上有效地获取信息有很大帮助。</p><h3 id="文章背景"><a href="#文章背景" class="headerlink" title="文章背景"></a>文章背景</h3><p>本教程基于 macOS 10.14 运行，hexo: 3.7.1，npm 5.6.0，如你与我的版本号不同，可能需要稍作调整或在底下留言更正。</p><h3 id="定义区"><a href="#定义区" class="headerlink" title="定义区"></a>定义区</h3><ul><li><em>pc_username</em> = 你电脑的账户</li><li><em>pc_ip</em> = 你电脑的 IP 地址</li></ul><h2 id="教程正文"><a href="#教程正文" class="headerlink" title="教程正文"></a>教程正文</h2><ol><li>首先要搞定 Hass 基础环境，确保可以运行。</li></ol><img src="/p/bd07/0-搞定Hass.png"><ol start="2"><li>在 Mac 上和树莓派的 Hass 做好无秘钥访问（只需做树莓派 -&gt; 电脑）。<br>我的是在 Docker 中装的，各位可能需要具体情况自行修改。<br>放上方法供参考：</li></ol><ul><li>在树莓派上进入 Hass Docker：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it homeassistant bash</span><br></pre></td></tr></table></figure><ul><li>生成 rsa，生成时会出现提示，按三次回车即可，请根据实际情况替换以下代码块中的 <em>pc_username</em> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub @pc_username</span><br></pre></td></tr></table></figure><img src="/p/bd07/1-RSA.png"><ul><li>然后输入你电脑的密码，稍后尝试下能否免密码登录。</li></ul><img src="/p/bd07/2-配置完毕.png"><ol start="3"><li>搞定无密码访问之后，在 Configuration.yaml 的 Switch: 后添加以下内容，请根据实际情况替换以下代码块中的 <em>pc_username</em> 以及 <em>pc_ip</em>，并注意缩进。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- platform: command_line</span><br><span class="line">  switches:</span><br><span class="line">  mac:</span><br><span class="line">    command_on: ssh pc_username@pc_ip caffeinate -u -t 2</span><br><span class="line">    command_off: ssh pc_username@pc_ip pmset displaysleepnow</span><br></pre></td></tr></table></figure><img src="/p/bd07/3-Configuration.png"><p>4、重启相关组件即可生效。</p><h2 id="残留的问题"><a href="#残留的问题" class="headerlink" title="残留的问题"></a>残留的问题</h2><p>目前效果可以实现，但有个问题：重启 Hass 服务之后就要再做一次免密钥登录，有点麻烦，不知道为什么会丢失秘钥数据。</p><p>日后解决了会补上，如果你有解决办法，也请在底下留言，感谢。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">pc_username = 你电脑的账户</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">pc_ip = 你电脑的 IP 地址</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;picture&quot;&gt;&lt;br&gt;  &lt;video id=&quot;mainvideo&quot; poster=&quot;https://preview-ec.dafork.com/FmdzzT3eIfFKhH_jtOrAKJs0ITLH/600&quot; ratiow=&quot;1280&quot; ratioh=&quot;720&quot; style=&quot;background-color: rgb(13, 13, 13); width: 100%;&quot; src=&quot;http://lvideo.dafork.com/lkXYpE1azEEnby1CgWHpMEHwhdqR&quot; controls&gt;&lt;/video&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="又来瞎鼓捣" scheme="https://sunbelife.com/categories/%E5%8F%88%E6%9D%A5%E7%9E%8E%E9%BC%93%E6%8D%A3/"/>
    
      <category term="智能家居" scheme="https://sunbelife.com/categories/%E5%8F%88%E6%9D%A5%E7%9E%8E%E9%BC%93%E6%8D%A3/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
    
      <category term="智能家居" scheme="https://sunbelife.com/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
  </entry>
  
  <entry>
    <title>年轻人的一个博客，Hexo + GitHub 零基础/零成本搭建教程</title>
    <link href="https://sunbelife.com/p/21736.html"/>
    <id>https://sunbelife.com/p/21736.html</id>
    <published>2018-09-08T05:45:45.000Z</published>
    <updated>2018-09-11T03:26:52.030Z</updated>
    
    <content type="html"><![CDATA[<img src="/p/21736/0-title.png"><blockquote><p>最近发现除了公众号和微博之外，还是需要一个地方来总结自己的经验，分享自己的见闻和思考，因为我记性比较差，不写下来就忘了。</p><p>而备忘录里不太适合分享，所以打算建个博客。</p><p>建博客的时候就涉及到选择博客系统，之前用的 WordPress 感觉太臃肿，阅读体验也不好，Typecho 太小众，插件也少，阅读体验也一般。</p><p>于是朋友推荐我试试 Hexo，一个基于 Node.js 开发的博客系统，支持 Markdown，而且阅读体验不错，插件也不少，用了下感觉不错，而且门槛也不高，因此写了本文给大家分享下零基础，零成本搭建这个博客系统的方法，也作为我博客的一篇文章吧。</p><p>推荐你在我的博客阅读这篇教程，一边体验，一边搭建：<a href="https://sunbelife.com">https://sunbelife.com</a></p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="阅读约定"><a href="#阅读约定" class="headerlink" title="阅读约定"></a>阅读约定</h3><p>开始之前，为了避免理解差异和排版美观，先和各位约定一下本教程的使用方法：</p><ul><li><p>一些需要多次使用的内容，为放混淆，我会在开始时进行详细解释，并赋予一个英文代称，文章后续会直接使用该代称，并用 <em>细斜体</em> 表示。</p><ul><li><p>如 <em>my_title</em> = 你文章的标题。</p><p>即后面文章出现的 <em>my_title</em> 即都代表着你文章的标题。</p></li></ul></li><li><p>以 <strong><em>粗斜体</em></strong> 展示的内容，是你需要根据实际情况自行替换的。</p><ul><li><p>如 cd /Users/<strong><em>你的用户名</em></strong>/Desktop</p><p>即需要先找到你的用户名，比如 Sunbelife，该段即为 cd /Users/Sunbelife/Desktop</p></li></ul></li><li><p>以下代码块方式展示的内容，一般情况下是你需要输入在终端或控制台内的，但也有特殊情况，比如示例或实例代码的展示：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><p>如有任何关于教程的问题，请在文章底部，礼貌，尊重，全面地描述清楚你的问题。</p><p>包括你操作在哪一步，尝试过什么努力，最后结果提示了什么，希望我给你哪部分帮助，最好可以附图。</p><p>有关如何提问，请查阅：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">《提问的智慧 <strong>How To Ask Questions The Smart Way</strong>》</a>，这将对你在互联网上有效地获取信息有很大帮助。</p><h3 id="文章背景"><a href="#文章背景" class="headerlink" title="文章背景"></a>文章背景</h3><p>本教程基于 macOS 10.14 运行，hexo: 3.7.1，npm 5.6.0，如你与我的版本号不同，可能需要稍作调整或在底下留言更正。</p><h3 id="定义区"><a href="#定义区" class="headerlink" title="定义区"></a>定义区</h3><ul><li><em>仓库</em> = 对应 GitHub 中的 Repositories</li><li><em>github_io_link = <strong>你 GitHub 的账号</strong></em>.github.io</li><li><em>github_project_link</em> = 你建立的 Repositories 链接，打开 Repositories 之后，复制网址栏或在 Clone or Download 处即可获得</li></ul><h2 id="教程正文"><a href="#教程正文" class="headerlink" title="教程正文"></a>教程正文</h2><h3 id="事先准备"><a href="#事先准备" class="headerlink" title="事先准备"></a>事先准备</h3><p>注册一个 GitHub 账号，并新建一个以 <em>github_io_link</em> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 命名的 GitHub <em>仓库</em> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><ol><li><p>打开 <a href="www.github.com">GitHub 官网</a> ，输入用户名、密码、邮箱，并点击 Sign Up for GitHub.</p><blockquote><p>注：密码请同时包含大小写字母与数字。</p></blockquote></li></ol><img src="/p/21736/1-注册.png"><ol start="2"><li>在接下来页面中选择 Free Plan 即可，点击下一步。</li></ol><ol start="3"><li>最后一个页面中直接跑到最下面选择 skip this step 即可。</li></ol><img src="/p/21736/3-skip.png"><ol start="4"><li>然后去你的邮箱点击验证邮件的链接。</li></ol><img src="/p/21736/4-验证邮箱.png"><ol start="5"><li>点击之后会自动再次打开 GitHub，点击左下角的 New Repositories，新建一个<em>仓库</em> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</li></ol><ol start="6"><li>在名称位置输入你的  <em>github_io_link</em> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，并点击底部的 Create repository.</li></ol><img src="/p/21736/6-输入名称.png"><ol start="7"><li>在接下来的页面中点击 Glone or Download，获取 <em>github_project_link</em> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> 备用。</li></ol><img src="/p/21736/7-获取链接.png"><h3 id="在本地安装-Hexo"><a href="#在本地安装-Hexo" class="headerlink" title="在本地安装 Hexo"></a>在本地安装 Hexo</h3><p>我们平时在使用 Hexo 时，是先在本地编辑好文档或修改完博客的样式后，再部署到 GitHub 服务器的，所以接下来我们需要做的就是在本地搭建好 Hexo 的服务，并建立一个储存网站内容的文件夹，为了举例方便，我们这里会把这个文件夹建立在桌面，跟着以下步骤走即可。</p><ol><li><p>打开终端，进入桌面目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Desktop</span><br></pre></td></tr></table></figure></li><li><p>接着为电脑安装 Hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo npm i -g hexo-cli -save</span><br><span class="line">sudo npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><blockquote><p>请单行分两次输入，出现提示时输入密码即可。</p></blockquote></li><li><p>安装完毕后，即可在桌面建立 Hexo 的文件夹了，我们这里把它命名为 my_blog：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init my_blog</span><br></pre></td></tr></table></figure></li><li><p>进入该目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd my_blog</span><br></pre></td></tr></table></figure></li><li><p>至此，Hexo 已经部署完毕，我们就可以在本地跑起来这个网页了，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器，输入 localhost:4000，即可看到博客已经可以成功在本地访问了：</p></li></ol><img src="/p/21736/8-本地访问.png"><ol start="7"><li><p>如果你访问不到这个页面，请检查上面是不是哪一步出错了，如果能成功访问，恭喜你已经完成了一大半，接下来的工作就是把它放到 GitHub 的服务器，让所有人都能通过链接随时访问你的博客。</p></li><li><p>访问之后记得在终端关闭掉本地服务器，激活终端窗口，并在键盘按下 Ctrl + C 键即可。</p></li></ol><h3 id="部署至-GitHub"><a href="#部署至-GitHub" class="headerlink" title="部署至 GitHub"></a>部署至 GitHub</h3><ol><li><p>进入刚刚建立的 Hexo 文件夹，即 my_blog 的路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Desktop/my_blog</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件，将 Hexo 关联至你的 GitHub <em>仓库</em> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano _config.yml</span><br></pre></td></tr></table></figure></li><li><p>将光标移动到最尾端（用鼠标滚轮即可），找到 Deployer 字样，进行如下修改：</p><ol><li>在 type 后写入 git。</li><li>增加 repo:  <em>github_io_link</em> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> </li></ol><blockquote><p>注：每个冒号后请加入一个空格，不然会出现错误。</p></blockquote></li></ol><img src="/p/21736/9-修改配置文件.png"><ol start="4"><li><p>按下 Ctrl + O、Ctrl + X 保存并退出。</p></li><li><p>接着就可以部署到 GitHub 了，以后每次部署都需要输入以下命令，依次清空网站缓存文件，以及上传网站文件至 GitHub：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>部署时会让你输入 GitHub 的账号和密码，乖乖输入：</p></li></ol><img src="/p/21736/10-github-login.png"><ol start="7"><li>待上传完毕后会显示 Deploy Done：</li></ol><img src="/p/21736/11-成功提示.png"><ol start="8"><li>接着在浏览器输入你的  <em>github_io_link</em> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> ，即可访问到刚才在本地测试的页面了：</li></ol><img src="/p/21736/12-访问.png"><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>至此，将 Hexo 搭建至 GitHub 的部分你就已经搞定了。</p><p>关于如何发布文章，安装主题和插件，定制 CSS 样式，我会陆续不断发布在博客上，你也可以即可自行借助 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官网的文档</a> 以及强大的 Google 继续学习。</p><h3 id="Windows-用户？"><a href="#Windows-用户？" class="headerlink" title="Windows 用户？"></a>Windows 用户？</h3><p>由于我手里没有 Windows 电脑，所以本教程未制作 Windows 版，不过本文使用的工具均有 Windows 版本。</p><p>如果你是 Windows 用户，请在 <a href="http://nodejs.cn/" target="_blank" rel="noopener">Node.js 官网</a> 安装 Node.js，<a href="https://gitforwindows.org" target="_blank" rel="noopener">Git For Windows</a> 下载 Git，以及 <a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM</a> 安装 NPM，并将以上教程中提到的终端更改为 CMD 执行即可。</p><center>欢迎在底部评论区贴出你的博客链接</center><center>Enjoy it.</center> <div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Github_io_link = 你 GitHub 的账号.github.io</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">仓库 = 对应 GitHub 中的 Repositories</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">你建立的 Repositories 链接，打开 Repositories 之后，复制网址栏或在 Clone or Download 处即可获得</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/p/21736/0-title.png&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;最近发现除了公众号和微博之外，还是需要一个地方来总结自己的经验，分享自己的见闻和思考，因为我记性比较差，不写下来就忘了。&lt;/p&gt;
&lt;p&gt;而备忘录里不太适合分享，所以打算建个博客。&lt;/p&gt;
&lt;p&gt;建博客的时候就涉及到选择博客系统，之前用的 WordPress 感觉太臃肿，阅读体验也不好，Typecho 太小众，插件也少，阅读体验也一般。&lt;/p&gt;
&lt;p&gt;于是朋友推荐我试试 Hexo，一个基于 Node.js 开发的博客系统，支持 Markdown，而且阅读体验不错，插件也不少，用了下感觉不错，而且门槛也不高，因此写了本文给大家分享下零基础，零成本搭建这个博客系统的方法，也作为我博客的一篇文章吧。&lt;/p&gt;
&lt;p&gt;推荐你在我的博客阅读这篇教程，一边体验，一边搭建：&lt;a href=&quot;https://sunbelife.com&quot;&gt;https://sunbelife.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="写点教程" scheme="https://sunbelife.com/categories/%E5%86%99%E7%82%B9%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo 博客系统" scheme="https://sunbelife.com/categories/%E5%86%99%E7%82%B9%E6%95%99%E7%A8%8B/Hexo-%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Hexo 教程系列" scheme="https://sunbelife.com/tags/Hexo-%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="https://sunbelife.com/p/22462.html"/>
    <id>https://sunbelife.com/p/22462.html</id>
    <published>2018-09-05T21:07:31.000Z</published>
    <updated>2018-09-08T10:35:02.883Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World！</p><p>忘了这是第几次向一个写作平台打招呼了。</p><p>虽然自己向来不太喜欢向陌生人介绍自己的场面，但似乎自己一直有这样一个习惯，每写点新东西，做点新事情，刚开始的时候总会发一条象征着仪式感的“Hello World！” 消息，然后继续开始着平凡又琐碎的日常。</p><a id="more"></a><p>这个博客是今晚搭建的，折腾了整整一宿，前半宿在折腾我的尝鲜派 <a href="https://ibeta.me" target="_blank" rel="noopener">https://ibeta.me</a> 域名的解析问题，因为有粉丝跑来和我说，貌似域名邮箱出了些问题，给我发不了邮件了，这时候我才想起来原来邮件确实少了很多，然后查了查资料，发现该死的 CNAME 和 MX 不能同时指向裸域名，因为这是个历史遗留性问题，解决办法是要么换 DNS 服务商，但我觉得这样太动干戈，而且不知道换了之后 CDN 还能不能用，于是就选择尝试了第二个方法，把默认域名由 <a href="https://ibeta.me" target="_blank" rel="noopener">https://ibeta.me</a> 改为 &lt;<a href="http://www.ibeta.me&gt;" target="_blank" rel="noopener">www.ibeta.me&gt;</a> ，用 CNAME 解析，然后把 MX 指向裸域名就不会出现问题了。</p><p>然而因为每次解析都需要等待十分钟的生效时间，而且不知道其中又出现了什么问题，反复配置了半天 CDN 和 Nginx，又等了 N * 10 分钟之后，天快亮了… 只能收手下次再干了，因为折腾的时候网站是无法访问的，半夜弄比较安全。</p><p>之后就是鼓捣这个基于 Github 的 Hexo 博客系统了，目前觉得这个轻量化的小东西还挺好用的，写起文章比 WordPress 舒服一些，只是还不太会用，搭建的时候也踩了不少坑，基本没有一个靠谱的教程能顺着走下来的，可能是因为时间问题吧，等我这两天整理一份，就当做开始使用 Hexo 的第一份作品吧。</p><p>而这个博客，以后就作为我抒发个人想法和发牢骚的地方吧，和微博，公众号不同，这里可能贴近我生活和想法的内容会更多一些，也更自由一些。因为我并不期待有多少人会看到，也不期待这里能得到什么样的回馈，只期待我的文字能有个地方暂存，我的想法能通过一篇又一篇的文章延伸，以及每个有幸能看到这个博客的你。</p><p>能更多的了解在屏幕这边的我。</p><p>我是孙宏量，微博上的 @Sunbelife，一个爱瞎折腾，爱数码的年轻人。</p><p>你呢？</p><img src="/p/22462/image-20180906071841283.png"><center>PS： ↑  我是这样写出这篇文章的。</center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello World！&lt;/p&gt;
&lt;p&gt;忘了这是第几次向一个写作平台打招呼了。&lt;/p&gt;
&lt;p&gt;虽然自己向来不太喜欢向陌生人介绍自己的场面，但似乎自己一直有这样一个习惯，每写点新东西，做点新事情，刚开始的时候总会发一条象征着仪式感的“Hello World！” 消息，然后继续开始着平凡又琐碎的日常。&lt;/p&gt;
    
    </summary>
    
      <category term="琐碎的日常" scheme="https://sunbelife.com/categories/%E7%90%90%E7%A2%8E%E7%9A%84%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="Hello World" scheme="https://sunbelife.com/tags/Hello-World/"/>
    
  </entry>
  
</feed>
